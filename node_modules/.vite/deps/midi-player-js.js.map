{
  "version": 3,
  "sources": ["../../midi-player-js/build/index.browser.js"],
  "sourcesContent": ["function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Constants used in player.\n */\nvar Constants = {\n  VERSION: '2.0.16',\n  NOTES: [],\n  HEADER_CHUNK_LENGTH: 14,\n  CIRCLE_OF_FOURTHS: ['C', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb', 'Fb', 'Bbb', 'Ebb', 'Abb'],\n  CIRCLE_OF_FIFTHS: ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#']\n}; // Builds notes object for reference against binary values.\n\nvar allNotes = [['C'], ['C#', 'Db'], ['D'], ['D#', 'Eb'], ['E'], ['F'], ['F#', 'Gb'], ['G'], ['G#', 'Ab'], ['A'], ['A#', 'Bb'], ['B']];\nvar counter = 0; // All available octaves.\n\nvar _loop = function _loop(i) {\n  allNotes.forEach(function (noteGroup) {\n    noteGroup.forEach(function (note) {\n      return Constants.NOTES[counter] = note + i;\n    });\n    counter++;\n  });\n};\n\nfor (var i = -1; i <= 9; i++) {\n  _loop(i);\n}\n\n/**\n * Contains misc static utility methods.\n */\nvar Utils = /*#__PURE__*/function () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, null, [{\n    key: \"byteToHex\",\n    value:\n    /**\n     * Converts a single byte to a hex string.\n     * @param {number} byte\n     * @return {string}\n     */\n    function byteToHex(_byte) {\n      // Ensure hex string always has two chars\n      return ('0' + _byte.toString(16)).slice(-2);\n    }\n    /**\n     * Converts an array of bytes to a hex string.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToHex\",\n    value: function bytesToHex(byteArray) {\n      var hex = [];\n      byteArray.forEach(function (_byte2) {\n        return hex.push(Utils.byteToHex(_byte2));\n      });\n      return hex.join('');\n    }\n    /**\n     * Converts a hex string to a number.\n     * @param {string} hexString\n     * @return {number}\n     */\n\n  }, {\n    key: \"hexToNumber\",\n    value: function hexToNumber(hexString) {\n      return parseInt(hexString, 16);\n    }\n    /**\n     * Converts an array of bytes to a number.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesToNumber\",\n    value: function bytesToNumber(byteArray) {\n      return Utils.hexToNumber(Utils.bytesToHex(byteArray));\n    }\n    /**\n     * Converts an array of bytes to letters.\n     * @param {array} byteArray\n     * @return {string}\n     */\n\n  }, {\n    key: \"bytesToLetters\",\n    value: function bytesToLetters(byteArray) {\n      var letters = [];\n      byteArray.forEach(function (_byte3) {\n        return letters.push(String.fromCharCode(_byte3));\n      });\n      return letters.join('');\n    }\n    /**\n     * Converts a decimal to it's binary representation.\n     * @param {number} dec\n     * @return {string}\n     */\n\n  }, {\n    key: \"decToBinary\",\n    value: function decToBinary(dec) {\n      return (dec >>> 0).toString(2);\n    }\n    /**\n     * Determines the length in bytes of a variable length quaantity.  The first byte in given range is assumed to be beginning of var length quantity.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"getVarIntLength\",\n    value: function getVarIntLength(byteArray) {\n      // Get byte count of delta VLV\n      // http://www.ccarh.org/courses/253/handout/vlv/\n      // If byte is greater or equal to 80h (128 decimal) then the next byte\n      // is also part of the VLV,\n      // else byte is the last byte in a VLV.\n      var currentByte = byteArray[0];\n      var byteCount = 1;\n\n      while (currentByte >= 128) {\n        currentByte = byteArray[byteCount];\n        byteCount++;\n      }\n\n      return byteCount;\n    }\n    /**\n     * Reads a variable length value.\n     * @param {array} byteArray\n     * @return {number}\n     */\n\n  }, {\n    key: \"readVarInt\",\n    value: function readVarInt(byteArray) {\n      var result = 0;\n      byteArray.forEach(function (number) {\n        var b = number;\n\n        if (b & 0x80) {\n          result += b & 0x7f;\n          result <<= 7;\n        } else {\n          /* b is the last byte */\n          result += b;\n        }\n      });\n      return result;\n    }\n    /**\n     * Decodes base-64 encoded string\n     * @param {string} string\n     * @return {string}\n     */\n\n  }, {\n    key: \"atob\",\n    value: function (_atob) {\n      function atob(_x) {\n        return _atob.apply(this, arguments);\n      }\n\n      atob.toString = function () {\n        return _atob.toString();\n      };\n\n      return atob;\n    }(function (string) {\n      if (typeof atob === 'function') return atob(string);\n      return Buffer.from(string, 'base64').toString('binary');\n    })\n  }]);\n\n  return Utils;\n}();\n\n/**\n * Class representing a track.  Contains methods for parsing events and keeping track of pointer.\n */\n\nvar Track = /*#__PURE__*/function () {\n  function Track(index, data) {\n    _classCallCheck(this, Track);\n\n    this.enabled = true;\n    this.eventIndex = 0;\n    this.pointer = 0;\n    this.lastTick = 0;\n    this.lastStatus = null;\n    this.index = index;\n    this.data = data;\n    this.delta = 0;\n    this.runningDelta = 0;\n    this.events = []; // Ensure last 3 bytes of track are End of Track event\n\n    var lastThreeBytes = this.data.subarray(this.data.length - 3, this.data.length);\n\n    if (!(lastThreeBytes[0] === 0xff && lastThreeBytes[1] === 0x2f && lastThreeBytes[2] === 0x00)) {\n      throw 'Invalid MIDI file; Last three bytes of track ' + this.index + 'must be FF 2F 00 to mark end of track';\n    }\n  }\n  /**\n   * Resets all stateful track informaion used during playback.\n   * @return {Track}\n   */\n\n\n  _createClass(Track, [{\n    key: \"reset\",\n    value: function reset() {\n      this.enabled = true;\n      this.eventIndex = 0;\n      this.pointer = 0;\n      this.lastTick = 0;\n      this.lastStatus = null;\n      this.delta = 0;\n      this.runningDelta = 0;\n      return this;\n    }\n    /**\n     * Sets this track to be enabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n      return this;\n    }\n    /**\n     * Sets this track to be disabled during playback.\n     * @return {Track}\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      return this;\n    }\n    /**\n     * Sets the track event index to the nearest event to the given tick.\n     * @param {number} tick\n     * @return {Track}\n     */\n\n  }, {\n    key: \"setEventIndexByTick\",\n    value: function setEventIndexByTick(tick) {\n      tick = tick || 0;\n\n      for (var i in this.events) {\n        if (this.events[i].tick >= tick) {\n          this.eventIndex = i;\n          return this;\n        }\n      }\n    }\n    /**\n     * Gets byte located at pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentByte\",\n    value: function getCurrentByte() {\n      return this.data[this.pointer];\n    }\n    /**\n     * Gets count of delta bytes and current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDeltaByteCount\",\n    value: function getDeltaByteCount() {\n      return Utils.getVarIntLength(this.data.subarray(this.pointer));\n    }\n    /**\n     * Get delta value at current pointer position.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getDelta\",\n    value: function getDelta() {\n      return Utils.readVarInt(this.data.subarray(this.pointer, this.pointer + this.getDeltaByteCount()));\n    }\n    /**\n     * Handles event within a given track starting at specified index\n     * @param {number} currentTick\n     * @param {boolean} dryRun - If true events will be parsed and returned regardless of time.\n     */\n\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(currentTick, dryRun) {\n      dryRun = dryRun || false;\n\n      if (dryRun) {\n        var elapsedTicks = currentTick - this.lastTick;\n        var delta = this.getDelta();\n        var eventReady = elapsedTicks >= delta;\n\n        if (this.pointer < this.data.length && (dryRun || eventReady)) {\n          var _event = this.parseEvent();\n\n          if (this.enabled) return _event; // Recursively call this function for each event ahead that has 0 delta time?\n        }\n      } else {\n        // Let's actually play the MIDI from the generated JSON events created by the dry run.\n        if (this.events[this.eventIndex] && this.events[this.eventIndex].tick <= currentTick) {\n          this.eventIndex++;\n          if (this.enabled) return this.events[this.eventIndex - 1];\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Get string data from event.\n     * @param {number} eventStartIndex\n     * @return {string}\n     */\n\n  }, {\n    key: \"getStringData\",\n    value: function getStringData(eventStartIndex) {\n      var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n      var varIntValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength));\n      var letters = Utils.bytesToLetters(this.data.subarray(eventStartIndex + 2 + varIntLength, eventStartIndex + 2 + varIntLength + varIntValue));\n      return letters;\n    }\n    /**\n     * Parses event into JSON and advances pointer for the track\n     * @return {object}\n     */\n\n  }, {\n    key: \"parseEvent\",\n    value: function parseEvent() {\n      var eventStartIndex = this.pointer + this.getDeltaByteCount();\n      var eventJson = {};\n      var deltaByteCount = this.getDeltaByteCount();\n      eventJson.track = this.index + 1;\n      eventJson.delta = this.getDelta();\n      this.lastTick = this.lastTick + eventJson.delta;\n      this.runningDelta += eventJson.delta;\n      eventJson.tick = this.runningDelta;\n      eventJson.byteIndex = this.pointer; //eventJson.raw = event;\n\n      if (this.data[eventStartIndex] == 0xff) {\n        // Meta Event\n        // If this is a meta event we should emit the data and immediately move to the next event\n        // otherwise if we let it run through the next cycle a slight delay will accumulate if multiple tracks\n        // are being played simultaneously\n        switch (this.data[eventStartIndex + 1]) {\n          case 0x00:\n            // Sequence Number\n            eventJson.name = 'Sequence Number';\n            break;\n\n          case 0x01:\n            // Text Event\n            eventJson.name = 'Text Event';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x02:\n            // Copyright Notice\n            eventJson.name = 'Copyright Notice';\n            break;\n\n          case 0x03:\n            // Sequence/Track Name\n            eventJson.name = 'Sequence/Track Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x04:\n            // Instrument Name\n            eventJson.name = 'Instrument Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x05:\n            // Lyric\n            eventJson.name = 'Lyric';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x06:\n            // Marker\n            eventJson.name = 'Marker';\n            break;\n\n          case 0x07:\n            // Cue Point\n            eventJson.name = 'Cue Point';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x09:\n            // Device Name\n            eventJson.name = 'Device Name';\n            eventJson.string = this.getStringData(eventStartIndex);\n            break;\n\n          case 0x20:\n            // MIDI Channel Prefix\n            eventJson.name = 'MIDI Channel Prefix';\n            break;\n\n          case 0x21:\n            // MIDI Port\n            eventJson.name = 'MIDI Port';\n            eventJson.data = Utils.bytesToNumber([this.data[eventStartIndex + 3]]);\n            break;\n\n          case 0x2F:\n            // End of Track\n            eventJson.name = 'End of Track';\n            break;\n\n          case 0x51:\n            // Set Tempo\n            eventJson.name = 'Set Tempo';\n            eventJson.data = Math.round(60000000 / Utils.bytesToNumber(this.data.subarray(eventStartIndex + 3, eventStartIndex + 6)));\n            this.tempo = eventJson.data;\n            break;\n\n          case 0x54:\n            // SMTPE Offset\n            eventJson.name = 'SMTPE Offset';\n            break;\n\n          case 0x58:\n            // Time Signature\n            // FF 58 04 nn dd cc bb\n            eventJson.name = 'Time Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 7);\n            eventJson.timeSignature = \"\" + eventJson.data[0] + \"/\" + Math.pow(2, eventJson.data[1]);\n            break;\n\n          case 0x59:\n            // Key Signature\n            // FF 59 02 sf mi\n            eventJson.name = 'Key Signature';\n            eventJson.data = this.data.subarray(eventStartIndex + 3, eventStartIndex + 5);\n\n            if (eventJson.data[0] >= 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FIFTHS[eventJson.data[0]];\n            } else if (eventJson.data[0] < 0) {\n              eventJson.keySignature = Constants.CIRCLE_OF_FOURTHS[Math.abs(eventJson.data[0])];\n            }\n\n            if (eventJson.data[1] == 0) {\n              eventJson.keySignature += \" Major\";\n            } else if (eventJson.data[1] == 1) {\n              eventJson.keySignature += \" Minor\";\n            }\n\n            break;\n\n          case 0x7F:\n            // Sequencer-Specific Meta-event\n            eventJson.name = 'Sequencer-Specific Meta-event';\n            break;\n\n          default:\n            eventJson.name = 'Unknown: ' + this.data[eventStartIndex + 1].toString(16);\n            break;\n        }\n\n        var varIntLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 2));\n        var length = Utils.readVarInt(this.data.subarray(eventStartIndex + 2, eventStartIndex + 2 + varIntLength)); //console.log(eventJson);\n\n        this.pointer += deltaByteCount + 3 + length; //console.log(eventJson);\n      } else if (this.data[eventStartIndex] === 0xf0) {\n        // Sysex\n        eventJson.name = 'Sysex';\n        var varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n        var varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + varQuantityByteLength));\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + varQuantityByteLength, eventStartIndex + 1 + varQuantityByteLength + varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + varQuantityByteLength + varQuantityByteValue;\n      } else if (this.data[eventStartIndex] === 0xf7) {\n        // Sysex (escape)\n        // http://www.somascape.org/midi/tech/mfile.html#sysex\n        eventJson.name = 'Sysex (escape)';\n\n        var _varQuantityByteLength = Utils.getVarIntLength(this.data.subarray(eventStartIndex + 1));\n\n        var _varQuantityByteValue = Utils.readVarInt(this.data.subarray(eventStartIndex + 1, eventStartIndex + 1 + _varQuantityByteLength));\n\n        eventJson.data = this.data.subarray(eventStartIndex + 1 + _varQuantityByteLength, eventStartIndex + 1 + _varQuantityByteLength + _varQuantityByteValue);\n        this.pointer += deltaByteCount + 1 + _varQuantityByteLength + _varQuantityByteValue;\n      } else {\n        // Voice event\n        if (this.data[eventStartIndex] < 0x80) {\n          // Running status\n          eventJson.running = true;\n          eventJson.noteNumber = this.data[eventStartIndex];\n          eventJson.noteName = Constants.NOTES[this.data[eventStartIndex]];\n          eventJson.velocity = this.data[eventStartIndex + 1];\n\n          if (this.lastStatus <= 0x8f) {\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0x9f) {\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.lastStatus <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 1;\n          } else if (this.lastStatus <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 2;\n          } else {\n            throw \"Unknown event (running): \".concat(this.lastStatus);\n          }\n        } else {\n          this.lastStatus = this.data[eventStartIndex];\n\n          if (this.data[eventStartIndex] <= 0x8f) {\n            // Note off\n            eventJson.name = 'Note off';\n            eventJson.channel = this.lastStatus - 0x80 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0x9f) {\n            // Note on\n            eventJson.name = 'Note on';\n            eventJson.channel = this.lastStatus - 0x90 + 1;\n            eventJson.noteNumber = this.data[eventStartIndex + 1];\n            eventJson.noteName = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.velocity = Math.round(this.data[eventStartIndex + 2] / 127 * 100);\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xaf) {\n            // Polyphonic Key Pressure\n            eventJson.name = 'Polyphonic Key Pressure';\n            eventJson.channel = this.lastStatus - 0xa0 + 1;\n            eventJson.note = Constants.NOTES[this.data[eventStartIndex + 1]];\n            eventJson.pressure = event[2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xbf) {\n            // Controller Change\n            eventJson.name = 'Controller Change';\n            eventJson.channel = this.lastStatus - 0xb0 + 1;\n            eventJson.number = this.data[eventStartIndex + 1];\n            eventJson.value = this.data[eventStartIndex + 2];\n            this.pointer += deltaByteCount + 3;\n          } else if (this.data[eventStartIndex] <= 0xcf) {\n            // Program Change\n            eventJson.name = 'Program Change';\n            eventJson.channel = this.lastStatus - 0xc0 + 1;\n            eventJson.value = this.data[eventStartIndex + 1];\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xdf) {\n            // Channel Key Pressure\n            eventJson.name = 'Channel Key Pressure';\n            eventJson.channel = this.lastStatus - 0xd0 + 1;\n            this.pointer += deltaByteCount + 2;\n          } else if (this.data[eventStartIndex] <= 0xef) {\n            // Pitch Bend\n            eventJson.name = 'Pitch Bend';\n            eventJson.channel = this.lastStatus - 0xe0 + 1;\n            this.pointer += deltaByteCount + 3;\n          } else {\n            throw \"Unknown event: \".concat(this.data[eventStartIndex]); //eventJson.name = `Unknown.  Pointer: ${this.pointer.toString()}, ${eventStartIndex.toString()}, ${this.data[eventStartIndex]}, ${this.data.length}`;\n          }\n        }\n      }\n\n      this.delta += eventJson.delta;\n      this.events.push(eventJson);\n      return eventJson;\n    }\n    /**\n     * Returns true if pointer has reached the end of the track.\n     * @param {boolean}\n     */\n\n  }, {\n    key: \"endOfTrack\",\n    value: function endOfTrack() {\n      if (this.data[this.pointer + 1] == 0xff && this.data[this.pointer + 2] == 0x2f && this.data[this.pointer + 3] == 0x00) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return Track;\n}();\n\nif (!Uint8Array.prototype.forEach) {\n  Object.defineProperty(Uint8Array.prototype, 'forEach', {\n    value: Array.prototype.forEach\n  });\n}\n/**\n * Main player class.  Contains methods to load files, start, stop.\n * @param {function} - Callback to fire for each MIDI event.  Can also be added with on('midiEvent', fn)\n * @param {array} - Array buffer of MIDI file (optional).\n */\n\n\nvar Player = /*#__PURE__*/function () {\n  function Player(eventHandler, buffer) {\n    _classCallCheck(this, Player);\n\n    this.sampleRate = 5; // milliseconds\n\n    this.startTime = 0;\n    this.buffer = buffer || null;\n    this.midiChunksByteLength = null;\n    this.division;\n    this.format;\n    this.setIntervalId = false;\n    this.tracks = [];\n    this.instruments = [];\n    this.defaultTempo = 120;\n    this.tempo = null;\n    this.startTick = 0;\n    this.tick = 0;\n    this.lastTick = null;\n    this.inLoop = false;\n    this.totalTicks = 0;\n    this.events = [];\n    this.totalEvents = 0;\n    this.eventListeners = {};\n    if (typeof eventHandler === 'function') this.on('midiEvent', eventHandler);\n  }\n  /**\n   * Load a file into the player (Node.js only).\n   * @param {string} path - Path of file.\n   * @return {Player}\n   */\n\n\n  _createClass(Player, [{\n    key: \"loadFile\",\n    value: function loadFile(path) {\n      {\n        throw 'loadFile is only supported on Node.js';\n      }\n    }\n    /**\n     * Load an array buffer into the player.\n     * @param {array} arrayBuffer - Array buffer of file to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadArrayBuffer\",\n    value: function loadArrayBuffer(arrayBuffer) {\n      this.buffer = new Uint8Array(arrayBuffer);\n      return this.fileLoaded();\n    }\n    /**\n     * Load a data URI into the player.\n     * @param {string} dataUri - Data URI to be loaded.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"loadDataUri\",\n    value: function loadDataUri(dataUri) {\n      // convert base64 to raw binary data held in a string.\n      // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n      var byteString = Utils.atob(dataUri.split(',')[1]); // write the bytes of the string to an ArrayBuffer\n\n      var ia = new Uint8Array(byteString.length);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      this.buffer = ia;\n      return this.fileLoaded();\n    }\n    /**\n     * Get filesize of loaded file in number of bytes.\n     * @return {number} - The filesize.\n     */\n\n  }, {\n    key: \"getFilesize\",\n    value: function getFilesize() {\n      return this.buffer ? this.buffer.length : 0;\n    }\n    /**\n     * Sets default tempo, parses file for necessary information, and does a dry run to calculate total length.\n     * Populates this.events & this.totalTicks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"fileLoaded\",\n    value: function fileLoaded() {\n      if (!this.validate()) throw 'Invalid MIDI file; should start with MThd';\n      return this.setTempo(this.defaultTempo).getDivision().getFormat().getTracks().dryRun();\n    }\n    /**\n     * Validates file using simple means - first four bytes should == MThd.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      //console.log((this.buffer.subarray(0, 15)));\n      return Utils.bytesToLetters(this.buffer.subarray(0, 4)) === 'MThd';\n    }\n    /**\n     * Gets MIDI file format for loaded file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getFormat\",\n    value: function getFormat() {\n      /*\n      MIDI files come in 3 variations:\n      Format 0 which contain a single track\n      Format 1 which contain one or more simultaneous tracks\n      (ie all tracks are to be played simultaneously).\n      Format 2 which contain one or more independant tracks\n      (ie each track is to be played independantly of the others).\n      return Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      */\n      this.format = Utils.bytesToNumber(this.buffer.subarray(8, 10));\n      return this;\n    }\n    /**\n     * Parses out tracks, places them in this.tracks and initializes this.pointers\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getTracks\",\n    value: function getTracks() {\n      this.tracks = [];\n      var trackOffset = 0;\n\n      while (trackOffset < this.buffer.length) {\n        if (Utils.bytesToLetters(this.buffer.subarray(trackOffset, trackOffset + 4)) == 'MTrk') {\n          var trackLength = Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8));\n          this.tracks.push(new Track(this.tracks.length, this.buffer.subarray(trackOffset + 8, trackOffset + 8 + trackLength)));\n        }\n\n        trackOffset += Utils.bytesToNumber(this.buffer.subarray(trackOffset + 4, trackOffset + 8)) + 8;\n      } // Get sum of all MIDI chunks here while we're at it\n\n\n      var trackChunksByteLength = 0;\n      this.tracks.forEach(function (track) {\n        trackChunksByteLength += 8 + track.data.length;\n      });\n      this.midiChunksByteLength = Constants.HEADER_CHUNK_LENGTH + trackChunksByteLength;\n      return this;\n    }\n    /**\n     * Enables a track for playing.\n     * @param {number} trackNumber - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"enableTrack\",\n    value: function enableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].enable();\n      return this;\n    }\n    /**\n     * Disables a track for playing.\n     * @param {number} - Track number\n     * @return {Player}\n     */\n\n  }, {\n    key: \"disableTrack\",\n    value: function disableTrack(trackNumber) {\n      this.tracks[trackNumber - 1].disable();\n      return this;\n    }\n    /**\n     * Gets quarter note division of loaded MIDI file.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"getDivision\",\n    value: function getDivision() {\n      this.division = Utils.bytesToNumber(this.buffer.subarray(12, Constants.HEADER_CHUNK_LENGTH));\n      return this;\n    }\n    /**\n     * The main play loop.\n     * @param {boolean} - Indicates whether or not this is being called simply for parsing purposes.  Disregards timing if so.\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"playLoop\",\n    value: function playLoop(dryRun) {\n      if (!this.inLoop) {\n        this.inLoop = true;\n        this.tick = this.getCurrentTick();\n        this.tracks.forEach(function (track, index) {\n          // Handle next event\n          if (!dryRun && this.endOfFile()) {\n            //console.log('end of file')\n            this.triggerPlayerEvent('endOfFile');\n            this.stop();\n          } else {\n            var event = track.handleEvent(this.tick, dryRun);\n\n            if (dryRun && event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.defaultTempo = event.data;\n                this.setTempo(event.data);\n              }\n\n              if (event.hasOwnProperty('name') && event.name === 'Program Change') {\n                if (!this.instruments.includes(event.value)) {\n                  this.instruments.push(event.value);\n                }\n              }\n            } else if (event) {\n              if (event.hasOwnProperty('name') && event.name === 'Set Tempo') {\n                // Grab tempo if available.\n                this.setTempo(event.data);\n\n                if (this.isPlaying()) {\n                  this.pause().play();\n                }\n              }\n\n              this.emitEvent(event);\n            }\n          }\n        }, this);\n        if (!dryRun) this.triggerPlayerEvent('playing', {\n          tick: this.tick\n        });\n        this.inLoop = false;\n      }\n    }\n    /**\n     * Setter for tempo.\n     * @param {number} - Tempo in bpm (defaults to 120)\n     */\n\n  }, {\n    key: \"setTempo\",\n    value: function setTempo(tempo) {\n      this.tempo = tempo;\n      return this;\n    }\n    /**\n     * Setter for startTime.\n     * @param {number} - UTC timestamp\n     * @return {Player}\n     */\n\n  }, {\n    key: \"setStartTime\",\n    value: function setStartTime(startTime) {\n      this.startTime = startTime;\n      return this;\n    }\n    /**\n     * Start playing loaded MIDI file if not already playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      if (this.isPlaying()) throw 'Already playing...'; // Initialize\n\n      if (!this.startTime) this.startTime = new Date().getTime(); // Start play loop\n      //window.requestAnimationFrame(this.playLoop.bind(this));\n\n      this.setIntervalId = setInterval(this.playLoop.bind(this), this.sampleRate); //this.setIntervalId = this.loop();\n\n      return this;\n    }\n  }, {\n    key: \"loop\",\n    value: function loop() {\n      setTimeout(function () {\n        // Do Something Here\n        this.playLoop(); // Then recall the parent function to\n        // create a recursive loop.\n\n        this.loop();\n      }.bind(this), this.sampleRate);\n    }\n    /**\n     * Pauses playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = this.tick;\n      this.startTime = 0;\n      return this;\n    }\n    /**\n     * Stops playback if playing.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this.setIntervalId);\n      this.setIntervalId = false;\n      this.startTick = 0;\n      this.startTime = 0;\n      this.resetTracks();\n      return this;\n    }\n    /**\n     * Skips player pointer to specified tick.\n     * @param {number} - Tick to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToTick\",\n    value: function skipToTick(tick) {\n      this.stop();\n      this.startTick = tick; // Need to set track event indexes to the nearest possible event to the specified tick.\n\n      this.tracks.forEach(function (track) {\n        track.setEventIndexByTick(tick);\n      });\n      return this;\n    }\n    /**\n     * Skips player pointer to specified percentage.\n     * @param {number} - Percent value in integer format.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToPercent\",\n    value: function skipToPercent(percent) {\n      if (percent < 0 || percent > 100) throw \"Percent must be number between 1 and 100.\";\n      this.skipToTick(Math.round(percent / 100 * this.totalTicks));\n      return this;\n    }\n    /**\n     * Skips player pointer to specified seconds.\n     * @param {number} - Seconds to skip to.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"skipToSeconds\",\n    value: function skipToSeconds(seconds) {\n      var songTime = this.getSongTime();\n      if (seconds < 0 || seconds > songTime) throw seconds + \" seconds not within song time of \" + songTime;\n      this.skipToPercent(seconds / songTime * 100);\n      return this;\n    }\n    /**\n     * Checks if player is playing\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isPlaying\",\n    value: function isPlaying() {\n      return this.setIntervalId > 0 || _typeof(this.setIntervalId) === 'object';\n    }\n    /**\n     * Plays the loaded MIDI file without regard for timing and saves events in this.events.  Essentially used as a parser.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"dryRun\",\n    value: function dryRun() {\n      // Reset tracks first\n      this.resetTracks();\n\n      while (!this.endOfFile()) {\n        this.playLoop(true); //console.log(this.bytesProcessed(), this.midiChunksByteLength);\n      }\n\n      this.events = this.getEvents();\n      this.totalEvents = this.getTotalEvents();\n      this.totalTicks = this.getTotalTicks();\n      this.startTick = 0;\n      this.startTime = 0; // Leave tracks in pristine condish\n\n      this.resetTracks(); //console.log('Song time: ' + this.getSongTime() + ' seconds / ' + this.totalTicks + ' ticks.');\n\n      this.triggerPlayerEvent('fileLoaded', this);\n      return this;\n    }\n    /**\n     * Resets play pointers for all tracks.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"resetTracks\",\n    value: function resetTracks() {\n      this.tracks.forEach(function (track) {\n        return track.reset();\n      });\n      return this;\n    }\n    /**\n     * Gets an array of events grouped by track.\n     * @return {array}\n     */\n\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      return this.tracks.map(function (track) {\n        return track.events;\n      });\n    }\n    /**\n     * Gets total number of ticks in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalTicks\",\n    value: function getTotalTicks() {\n      return Math.max.apply(null, this.tracks.map(function (track) {\n        return track.delta;\n      }));\n    }\n    /**\n     * Gets total number of events in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getTotalEvents\",\n    value: function getTotalEvents() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          events: {\n            length: a.events.length + b.events.length\n          }\n        };\n      }, {\n        events: {\n          length: 0\n        }\n      }).events.length;\n    }\n    /**\n     * Gets song duration in seconds.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTime\",\n    value: function getSongTime() {\n      return this.totalTicks / this.division / this.tempo * 60;\n    }\n    /**\n     * Gets remaining number of seconds in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongTimeRemaining\",\n    value: function getSongTimeRemaining() {\n      return Math.round((this.totalTicks - this.getCurrentTick()) / this.division / this.tempo * 60);\n    }\n    /**\n     * Gets remaining percent of playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getSongPercentRemaining\",\n    value: function getSongPercentRemaining() {\n      return Math.round(this.getSongTimeRemaining() / this.getSongTime() * 100);\n    }\n    /**\n     * Number of bytes processed in the loaded MIDI file.\n     * @return {number}\n     */\n\n  }, {\n    key: \"bytesProcessed\",\n    value: function bytesProcessed() {\n      return Constants.HEADER_CHUNK_LENGTH + this.tracks.length * 8 + this.tracks.reduce(function (a, b) {\n        return {\n          pointer: a.pointer + b.pointer\n        };\n      }, {\n        pointer: 0\n      }).pointer;\n    }\n    /**\n     * Number of events played up to this point.\n     * @return {number}\n     */\n\n  }, {\n    key: \"eventsPlayed\",\n    value: function eventsPlayed() {\n      return this.tracks.reduce(function (a, b) {\n        return {\n          eventIndex: a.eventIndex + b.eventIndex\n        };\n      }, {\n        eventIndex: 0\n      }).eventIndex;\n    }\n    /**\n     * Determines if the player pointer has reached the end of the loaded MIDI file.\n     * Used in two ways:\n     * 1. If playing result is based on loaded JSON events.\n     * 2. If parsing (dryRun) it's based on the actual buffer length vs bytes processed.\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"endOfFile\",\n    value: function endOfFile() {\n      if (this.isPlaying()) {\n        return this.totalTicks - this.tick <= 0;\n      }\n\n      return this.bytesProcessed() >= this.midiChunksByteLength; //this.buffer.length;\n    }\n    /**\n     * Gets the current tick number in playback.\n     * @return {number}\n     */\n\n  }, {\n    key: \"getCurrentTick\",\n    value: function getCurrentTick() {\n      if (!this.startTime) return this.startTick;\n      return Math.round((new Date().getTime() - this.startTime) / 1000 * (this.division * (this.tempo / 60))) + this.startTick;\n    }\n    /**\n     * Sends MIDI event out to listener.\n     * @param {object}\n     * @return {Player}\n     */\n\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(event) {\n      this.triggerPlayerEvent('midiEvent', event);\n      return this;\n    }\n    /**\n     * Subscribes events to listeners\n     * @param {string} - Name of event to subscribe to.\n     * @param {function} - Callback to fire when event is broadcast.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(playerEvent, fn) {\n      if (!this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent] = [];\n      this.eventListeners[playerEvent].push(fn);\n      return this;\n    }\n    /**\n     * Broadcasts event to trigger subscribed callbacks.\n     * @param {string} - Name of event.\n     * @param {object} - Data to be passed to subscriber callback.\n     * @return {Player}\n     */\n\n  }, {\n    key: \"triggerPlayerEvent\",\n    value: function triggerPlayerEvent(playerEvent, data) {\n      if (this.eventListeners.hasOwnProperty(playerEvent)) this.eventListeners[playerEvent].forEach(function (fn) {\n        return fn(data || {});\n      });\n      return this;\n    }\n  }]);\n\n  return Player;\n}();\n\nvar index = {\n  Player: Player,\n  Utils: Utils,\n  Constants: Constants\n};\n\nexport { index as default };\n"],
  "mappings": "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",
  "names": ["obj", "_loop", "Utils", "atob", "Track", "index", "Player", "event"]
}
